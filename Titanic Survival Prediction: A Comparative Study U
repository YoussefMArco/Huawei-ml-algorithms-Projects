{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":3136,"databundleVersionId":26502,"sourceType":"competition"},{"sourceId":2965537,"sourceType":"datasetVersion","datasetId":1818188}],"dockerImageVersionId":30804,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/youssefmakary27/titanic-survival-prediction-a-comparative-study-u?scriptVersionId=211864421\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2024-12-08T12:26:10.942679Z","iopub.execute_input":"2024-12-08T12:26:10.943104Z","iopub.status.idle":"2024-12-08T12:26:10.95212Z","shell.execute_reply.started":"2024-12-08T12:26:10.943067Z","shell.execute_reply":"2024-12-08T12:26:10.950717Z"}},"outputs":[{"name":"stdout","text":"/kaggle/input/titanic/train.csv\n/kaggle/input/titanic/test.csv\n/kaggle/input/titanic/gender_submission.csv\n/kaggle/input/titanic-dataset/Titanic-Dataset.csv\n","output_type":"stream"}],"execution_count":97},{"cell_type":"code","source":"df=pd.read_csv(\"/kaggle/input/titanic/train.csv\")\n\nprint(df.columns)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-08T12:26:10.954137Z","iopub.execute_input":"2024-12-08T12:26:10.954534Z","iopub.status.idle":"2024-12-08T12:26:10.976261Z","shell.execute_reply.started":"2024-12-08T12:26:10.954498Z","shell.execute_reply":"2024-12-08T12:26:10.975031Z"}},"outputs":[{"name":"stdout","text":"Index(['PassengerId', 'Survived', 'Pclass', 'Name', 'Sex', 'Age', 'SibSp',\n       'Parch', 'Ticket', 'Fare', 'Cabin', 'Embarked'],\n      dtype='object')\n","output_type":"stream"}],"execution_count":98},{"cell_type":"code","source":"columns_to_drop = ['PassengerId', 'Name', 'Ticket','SibSp','Parch','Cabin','Embarked']\n\ndf = df.drop(columns=columns_to_drop)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-08T12:26:10.978024Z","iopub.execute_input":"2024-12-08T12:26:10.978415Z","iopub.status.idle":"2024-12-08T12:26:10.985687Z","shell.execute_reply.started":"2024-12-08T12:26:10.978365Z","shell.execute_reply":"2024-12-08T12:26:10.984269Z"}},"outputs":[],"execution_count":99},{"cell_type":"code","source":"df","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-08T12:26:10.98712Z","iopub.execute_input":"2024-12-08T12:26:10.987476Z","iopub.status.idle":"2024-12-08T12:26:11.012306Z","shell.execute_reply.started":"2024-12-08T12:26:10.987442Z","shell.execute_reply":"2024-12-08T12:26:11.010868Z"}},"outputs":[{"execution_count":100,"output_type":"execute_result","data":{"text/plain":"     Survived  Pclass     Sex   Age     Fare\n0           0       3    male  22.0   7.2500\n1           1       1  female  38.0  71.2833\n2           1       3  female  26.0   7.9250\n3           1       1  female  35.0  53.1000\n4           0       3    male  35.0   8.0500\n..        ...     ...     ...   ...      ...\n886         0       2    male  27.0  13.0000\n887         1       1  female  19.0  30.0000\n888         0       3  female   NaN  23.4500\n889         1       1    male  26.0  30.0000\n890         0       3    male  32.0   7.7500\n\n[891 rows x 5 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>Fare</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>3</td>\n      <td>male</td>\n      <td>22.0</td>\n      <td>7.2500</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>1</td>\n      <td>female</td>\n      <td>38.0</td>\n      <td>71.2833</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>3</td>\n      <td>female</td>\n      <td>26.0</td>\n      <td>7.9250</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>1</td>\n      <td>female</td>\n      <td>35.0</td>\n      <td>53.1000</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0</td>\n      <td>3</td>\n      <td>male</td>\n      <td>35.0</td>\n      <td>8.0500</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>886</th>\n      <td>0</td>\n      <td>2</td>\n      <td>male</td>\n      <td>27.0</td>\n      <td>13.0000</td>\n    </tr>\n    <tr>\n      <th>887</th>\n      <td>1</td>\n      <td>1</td>\n      <td>female</td>\n      <td>19.0</td>\n      <td>30.0000</td>\n    </tr>\n    <tr>\n      <th>888</th>\n      <td>0</td>\n      <td>3</td>\n      <td>female</td>\n      <td>NaN</td>\n      <td>23.4500</td>\n    </tr>\n    <tr>\n      <th>889</th>\n      <td>1</td>\n      <td>1</td>\n      <td>male</td>\n      <td>26.0</td>\n      <td>30.0000</td>\n    </tr>\n    <tr>\n      <th>890</th>\n      <td>0</td>\n      <td>3</td>\n      <td>male</td>\n      <td>32.0</td>\n      <td>7.7500</td>\n    </tr>\n  </tbody>\n</table>\n<p>891 rows Ã— 5 columns</p>\n</div>"},"metadata":{}}],"execution_count":100},{"cell_type":"code","source":"df[\"Age\"].isnull().sum()\ndf[\"Age\"]=df[\"Age\"].fillna(df[\"Age\"].mean())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-08T12:26:11.015303Z","iopub.execute_input":"2024-12-08T12:26:11.015681Z","iopub.status.idle":"2024-12-08T12:26:11.030181Z","shell.execute_reply.started":"2024-12-08T12:26:11.01564Z","shell.execute_reply":"2024-12-08T12:26:11.028828Z"}},"outputs":[],"execution_count":101},{"cell_type":"code","source":"df.shape","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-08T12:26:11.03143Z","iopub.execute_input":"2024-12-08T12:26:11.031767Z","iopub.status.idle":"2024-12-08T12:26:11.045898Z","shell.execute_reply.started":"2024-12-08T12:26:11.031735Z","shell.execute_reply":"2024-12-08T12:26:11.044572Z"}},"outputs":[{"execution_count":102,"output_type":"execute_result","data":{"text/plain":"(891, 5)"},"metadata":{}}],"execution_count":102},{"cell_type":"code","source":"df.describe()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-08T12:26:11.047995Z","iopub.execute_input":"2024-12-08T12:26:11.048371Z","iopub.status.idle":"2024-12-08T12:26:11.081255Z","shell.execute_reply.started":"2024-12-08T12:26:11.048338Z","shell.execute_reply":"2024-12-08T12:26:11.080128Z"}},"outputs":[{"execution_count":103,"output_type":"execute_result","data":{"text/plain":"         Survived      Pclass         Age        Fare\ncount  891.000000  891.000000  891.000000  891.000000\nmean     0.383838    2.308642   29.699118   32.204208\nstd      0.486592    0.836071   13.002015   49.693429\nmin      0.000000    1.000000    0.420000    0.000000\n25%      0.000000    2.000000   22.000000    7.910400\n50%      0.000000    3.000000   29.699118   14.454200\n75%      1.000000    3.000000   35.000000   31.000000\nmax      1.000000    3.000000   80.000000  512.329200","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Age</th>\n      <th>Fare</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>891.000000</td>\n      <td>891.000000</td>\n      <td>891.000000</td>\n      <td>891.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>0.383838</td>\n      <td>2.308642</td>\n      <td>29.699118</td>\n      <td>32.204208</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>0.486592</td>\n      <td>0.836071</td>\n      <td>13.002015</td>\n      <td>49.693429</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>0.000000</td>\n      <td>1.000000</td>\n      <td>0.420000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>0.000000</td>\n      <td>2.000000</td>\n      <td>22.000000</td>\n      <td>7.910400</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>0.000000</td>\n      <td>3.000000</td>\n      <td>29.699118</td>\n      <td>14.454200</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>1.000000</td>\n      <td>3.000000</td>\n      <td>35.000000</td>\n      <td>31.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>1.000000</td>\n      <td>3.000000</td>\n      <td>80.000000</td>\n      <td>512.329200</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":103},{"cell_type":"code","source":"df = pd.get_dummies(df, columns=['Sex'])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-08T12:26:11.082536Z","iopub.execute_input":"2024-12-08T12:26:11.08287Z","iopub.status.idle":"2024-12-08T12:26:11.092393Z","shell.execute_reply.started":"2024-12-08T12:26:11.082839Z","shell.execute_reply":"2024-12-08T12:26:11.091059Z"}},"outputs":[],"execution_count":104},{"cell_type":"code","source":"# Import necessary libraries\nfrom sklearn.datasets import load_digits\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import confusion_matrix, classification_report\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nX = df.drop(columns=\"Survived\")\ny= df[\"Survived\"]\nprint(X.head(4))\nprint(y.head(4))\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-08T12:26:11.093431Z","iopub.execute_input":"2024-12-08T12:26:11.093769Z","iopub.status.idle":"2024-12-08T12:26:11.113851Z","shell.execute_reply.started":"2024-12-08T12:26:11.093731Z","shell.execute_reply":"2024-12-08T12:26:11.11255Z"}},"outputs":[{"name":"stdout","text":"   Pclass   Age     Fare  Sex_female  Sex_male\n0       3  22.0   7.2500       False      True\n1       1  38.0  71.2833        True     False\n2       3  26.0   7.9250        True     False\n3       1  35.0  53.1000        True     False\n0    0\n1    1\n2    1\n3    1\nName: Survived, dtype: int64\n","output_type":"stream"}],"execution_count":105},{"cell_type":"code","source":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-08T12:26:11.117323Z","iopub.execute_input":"2024-12-08T12:26:11.117697Z","iopub.status.idle":"2024-12-08T12:26:11.129135Z","shell.execute_reply.started":"2024-12-08T12:26:11.117664Z","shell.execute_reply":"2024-12-08T12:26:11.127973Z"}},"outputs":[],"execution_count":106},{"cell_type":"code","source":"# Initialize Logistic Regression model\nmodel = LogisticRegression(max_iter=10000)\n\n# Fit the model on training data\nmodel.fit(X_train, y_train)\nmodel = LogisticRegression(max_iter=10000, class_weight='balanced')\nmodel.fit(X_train, y_train)\n\n# Make predictions on test data\ny_pred = model.predict(X_test)\n\nprint(model.score(X_test,y_test))\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-08T12:26:11.13072Z","iopub.execute_input":"2024-12-08T12:26:11.131123Z","iopub.status.idle":"2024-12-08T12:26:11.174699Z","shell.execute_reply.started":"2024-12-08T12:26:11.131087Z","shell.execute_reply":"2024-12-08T12:26:11.173536Z"}},"outputs":[{"name":"stdout","text":"0.8100558659217877\n","output_type":"stream"}],"execution_count":107},{"cell_type":"code","source":"y.value_counts()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-08T12:26:11.175991Z","iopub.execute_input":"2024-12-08T12:26:11.17635Z","iopub.status.idle":"2024-12-08T12:26:11.185014Z","shell.execute_reply.started":"2024-12-08T12:26:11.176317Z","shell.execute_reply":"2024-12-08T12:26:11.183688Z"}},"outputs":[{"execution_count":108,"output_type":"execute_result","data":{"text/plain":"Survived\n0    549\n1    342\nName: count, dtype: int64"},"metadata":{}}],"execution_count":108},{"cell_type":"code","source":"# Generate the confusion matrix\ncm = confusion_matrix(y_test, y_pred)\n\n# Print the classification report\nprint(\"Classification Report:\")\nprint(classification_report(y_test, y_pred))\ntarget_names = ['Not Survived', 'Survived']\n\n# Visualize the confusion matrix\nplt.figure(figsize=(8, 6))\nsns.heatmap(cm, annot=True, cmap='Blues', fmt='d', xticklabels=target_names, yticklabels=target_names)\nplt.xlabel('Predicted Labels')\nplt.ylabel('True Labels')\nplt.title('Confusion Matrix')\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-08T12:26:11.186471Z","iopub.execute_input":"2024-12-08T12:26:11.186822Z","iopub.status.idle":"2024-12-08T12:26:11.469587Z","shell.execute_reply.started":"2024-12-08T12:26:11.186789Z","shell.execute_reply":"2024-12-08T12:26:11.468342Z"}},"outputs":[{"name":"stdout","text":"Classification Report:\n              precision    recall  f1-score   support\n\n           0       0.87      0.79      0.83       105\n           1       0.74      0.84      0.78        74\n\n    accuracy                           0.81       179\n   macro avg       0.81      0.81      0.81       179\nweighted avg       0.82      0.81      0.81       179\n\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 800x600 with 2 Axes>","image/png":""},"metadata":{}}],"execution_count":109},{"cell_type":"code","source":"from sklearn.ensemble import GradientBoostingClassifier","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-08T12:26:11.470852Z","iopub.execute_input":"2024-12-08T12:26:11.471221Z","iopub.status.idle":"2024-12-08T12:26:11.476484Z","shell.execute_reply.started":"2024-12-08T12:26:11.471189Z","shell.execute_reply":"2024-12-08T12:26:11.475364Z"}},"outputs":[],"execution_count":110},{"cell_type":"code","source":"# Initialize and train the Gradient Boosting model\nmodel_2 = GradientBoostingClassifier(n_estimators=100, learning_rate=1.0, max_depth=1, random_state=42) \nmodel_2.fit(X_train, y_train)\n\n# Make predictions on test data \ny_pred = model_2.predict(X_test) # Calculate accuracy\naccuracy = model_2.score(X_test, y_test) \nprint(\"Accuracy:\", accuracy) # Generate the confusion matrix \ncm = confusion_matrix(y_test, y_pred) \nprint(\"Confusion Matrix:\")\nprint(cm) # Print the classification report\nprint(\"Classification Report:\")\nprint(classification_report(y_test, y_pred))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-08T12:26:11.477698Z","iopub.execute_input":"2024-12-08T12:26:11.47812Z","iopub.status.idle":"2024-12-08T12:26:11.58197Z","shell.execute_reply.started":"2024-12-08T12:26:11.478076Z","shell.execute_reply":"2024-12-08T12:26:11.580814Z"}},"outputs":[{"name":"stdout","text":"Accuracy: 0.8100558659217877\nConfusion Matrix:\n[[92 13]\n [21 53]]\nClassification Report:\n              precision    recall  f1-score   support\n\n           0       0.81      0.88      0.84       105\n           1       0.80      0.72      0.76        74\n\n    accuracy                           0.81       179\n   macro avg       0.81      0.80      0.80       179\nweighted avg       0.81      0.81      0.81       179\n\n","output_type":"stream"}],"execution_count":111},{"cell_type":"code","source":"from xgboost import XGBClassifier\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-08T12:26:11.583352Z","iopub.execute_input":"2024-12-08T12:26:11.583705Z","iopub.status.idle":"2024-12-08T12:26:11.589559Z","shell.execute_reply.started":"2024-12-08T12:26:11.583673Z","shell.execute_reply":"2024-12-08T12:26:11.588323Z"}},"outputs":[],"execution_count":112},{"cell_type":"code","source":"model_3 = XGBClassifier(n_estimators=100, learning_rate=0.1, max_depth=3, random_state=42)\nmodel_3.fit(X_train, y_train)\n\n# Make predictions on test data \ny_pred = model_3.predict(X_test) # Calculate accuracy\naccuracy = model_3.score(X_test, y_test) \nprint(\"Accuracy:\", accuracy) # Generate the confusion matrix \ncm = confusion_matrix(y_test, y_pred) \nprint(\"Confusion Matrix:\")\nprint(cm) # Print the classification report\nprint(\"Classification Report:\")\nprint(classification_report(y_test, y_pred))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-08T12:26:11.591425Z","iopub.execute_input":"2024-12-08T12:26:11.591831Z","iopub.status.idle":"2024-12-08T12:26:11.665376Z","shell.execute_reply.started":"2024-12-08T12:26:11.591798Z","shell.execute_reply":"2024-12-08T12:26:11.663894Z"}},"outputs":[{"name":"stdout","text":"Accuracy: 0.8212290502793296\nConfusion Matrix:\n[[95 10]\n [22 52]]\nClassification Report:\n              precision    recall  f1-score   support\n\n           0       0.81      0.90      0.86       105\n           1       0.84      0.70      0.76        74\n\n    accuracy                           0.82       179\n   macro avg       0.83      0.80      0.81       179\nweighted avg       0.82      0.82      0.82       179\n\n","output_type":"stream"}],"execution_count":113},{"cell_type":"code","source":"from sklearn.ensemble import AdaBoostClassifier\nfrom sklearn.tree import DecisionTreeClassifier","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-08T12:26:11.667323Z","iopub.execute_input":"2024-12-08T12:26:11.668408Z","iopub.status.idle":"2024-12-08T12:26:11.673924Z","shell.execute_reply.started":"2024-12-08T12:26:11.668352Z","shell.execute_reply":"2024-12-08T12:26:11.67266Z"}},"outputs":[],"execution_count":114},{"cell_type":"code","source":"# Initialize and train the AdaBoost model\nbase_estimator = DecisionTreeClassifier(max_depth=1) \nmodel_4 = AdaBoostClassifier(base_estimator=base_estimator, n_estimators=100, learning_rate=1.0, random_state=42) \nmodel_4.fit(X_train, y_train)\n\n\n# Make predictions on test data \ny_pred = model_4.predict(X_test) # Calculate accuracy\naccuracy = model_4.score(X_test, y_test) \nprint(\"Accuracy:\", accuracy) # Generate the confusion matrix \ncm = confusion_matrix(y_test, y_pred) \nprint(\"Confusion Matrix:\")\nprint(cm) # Print the classification report\nprint(\"Classification Report:\")\nprint(classification_report(y_test, y_pred))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-08T12:26:11.675807Z","iopub.execute_input":"2024-12-08T12:26:11.676247Z","iopub.status.idle":"2024-12-08T12:26:11.946214Z","shell.execute_reply.started":"2024-12-08T12:26:11.676213Z","shell.execute_reply":"2024-12-08T12:26:11.944713Z"}},"outputs":[{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_base.py:166: FutureWarning: `base_estimator` was renamed to `estimator` in version 1.2 and will be removed in 1.4.\n  warnings.warn(\n","output_type":"stream"},{"name":"stdout","text":"Accuracy: 0.7988826815642458\nConfusion Matrix:\n[[91 14]\n [22 52]]\nClassification Report:\n              precision    recall  f1-score   support\n\n           0       0.81      0.87      0.83       105\n           1       0.79      0.70      0.74        74\n\n    accuracy                           0.80       179\n   macro avg       0.80      0.78      0.79       179\nweighted avg       0.80      0.80      0.80       179\n\n","output_type":"stream"}],"execution_count":115}]}